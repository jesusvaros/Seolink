
import fs from 'fs';
import path from 'path';
import slugify from 'slugify';
import { config } from 'dotenv';
import { OpenAI } from 'openai';
import TurndownService from 'turndown';
import { JSDOM } from 'jsdom';
import { Readability } from '@mozilla/readability';
import { chromium } from 'playwright';

config();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const turndown = new TurndownService();

// Extraer contenido limpio desde cualquier web
async function fetchCleanContent(url) {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();
  await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });

  const html = await page.content();
  const dom = new JSDOM(html, { url });
  const reader = new Readability(dom.window.document);
  const article = reader.parse();

  await browser.close();
  return {
    title: article.title || 'Sin t√≠tulo',
    content: article.content || '',
    excerpt: article.excerpt || '',
    image: article.image || '',
    date: new Date().toISOString().split('T')[0],
    url,
  };
}

// Generar MDX con GPT-4o
async function generateMDX({ title, content, url, date, image }) {
  const markdown = turndown.turndown(content);
  const prompt = `
INSTRUCCI√ìN: Crea un archivo MDX para una web de afiliados siguiendo exactamente este formato:

1. NUNCA uses marcas de c√≥digo tipo \`\`\`mdx o \`\`\`markdown
2. El archivo debe comenzar EXACTAMENTE con tres guiones --- sin espacios antes
3. No uses ninguna comilla invertida (\`) en todo el archivo
4. Todos los campos del frontmatter deben ir entre comillas dobles
5. IMPORTANTE: Los comentarios en YAML deben comenzar con # y estar en la MISMA L√çNEA del campo que comentan, NUNCA en una l√≠nea separada
6. NO incluyas comentarios multil√≠nea que comiencen con #
7. Elimina todos los comentarios de ejemplo en tu respuesta final, s√≥lo incluye los datos necesarios

EJEMPLO EXACTO DE C√ìMO DEBE EMPEZAR (sin espacios al inicio):

---
title: "T√≠tulo del art√≠culo"
date: "YYYY-MM-DD"
slug: "slug-con-guiones"
image: "https://url-de-la-imagen.jpg"
excerpt: "Resumen √∫til del art√≠culo"
category: "cocina"
products:
  - asin: "ID de Amazon"
    name: "Nombre del producto"
    image: "https://..."
    affiliateLink: "https://www.amazon.es/dp/ASIN?tag=oferta-limitada-21"
    price: "Numero visible del precio con moneda ‚Ç¨"
    destacado: "La m√°s barata"
    potencia: "xx W"
    capacidad: "xx L"
    velocidades: "n√∫mero"
    funciones: "value"
    pros: "Ventaja 1, Ventaja 2, Ventaja 3"
    cons: "Desventaja 1, Desventaja 2"
    description: "Descripci√≥n corta"
    detailedDescription: "Descripci√≥n m√°s detallada de unas 2-3 frases sobre el producto principales caracter√≠sticas, ventajas y casos de uso."
---

---

# BODY DEL ART√çCULO

Despu√©s del frontmatter, el cuerpo debe estar en **Markdown + JSX v√°lido**. 

Debes incluir estos imports al principio del archivo (despu√©s de las triple rayas del frontmatter):

import ProductDetailCard from '../components/ProductDetailCard'
import ProductTable from '../components/ProductTable'
import ProductRankingTable from '../components/ProductRankingTable'
import ProductHeading from '../components/ProductHeading'
import ArticleCard from '../components/ArticleCard'

Sigue esta estructura obligatoria:

## # T√≠tulo principal (H1)
Debe repetir el t√≠tulo del frontmatter

## ## Resumen de los mejores productos

Inserta primero una tabla de ranking con las caracter√≠sticas destacadas de cada producto:

<ProductRankingTable products={products} />

## ## Consejos antes de comprar

Incluye contenido SEO √∫til que venga del art√≠culo original: c√≥mo elegir, errores comunes, diferencias entre tipos, etc.

## ## Valoraciones 

Comparte texto general sobre opiniones o experiencia, como har√≠a un autor experto o un blog confiable.

## ## An√°lisis detallado

Despu√©s de la tabla, a√±ade una secci√≥n para cada producto con su an√°lisis detallado. Aseg√∫rate de numerarlos para mantener la coherencia con la tabla. Usa el siguiente formato para cada producto (reemplaza "Nombre del producto" con el nombre exacto del producto y "index" con su n√∫mero):

<ProductHeading product={products.find(p => p.name === "Nombre del producto")} index={1} />

Aqu√≠ agrega una peque√±a introducci√≥n del producto (1-2 frases).

<ProductDetailCard product={products.find(p => p.name === "Nombre del producto")} />

Repite esta estructura para cada producto, usando un encabezado H3 y el componente ProductDetailCard para cada uno.

## ## Comparativa t√©cnica completa

Antes de tomar tu decisi√≥n final, compara todas las especificaciones t√©cnicas de los productos analizados:

<ProductTable products={products} />

## ## Conclusi√≥n

Cierra con una invitaci√≥n directa y √∫til a que el usuario compare y compre. Termina con un tono √∫til y motivador.

---

# PROHIBIDO:

- NO uses HTML como <div>, <img>, <dl>, ni variables tipo frontMatter.products
- NO pongas JSX en el frontmatter
- NO uses referencias inexistentes
- NUNCA uses otro tag que no sea "oferta-limitada-21" en los enlaces de afiliados de Amazon
- SIEMPRE utiliza el formato https://www.amazon.es/dp/ASIN?tag=oferta-limitada-21 para TODOS los enlaces de afiliados

---

CONTENIDO BASE:

T√≠tulo: ${title}
Fecha: ${date}
URL: ${url}

Texto extra√≠do del art√≠culo:
${markdown}
`;


  const chat = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [{ role: 'user', content: prompt }],
  });

  return chat.choices[0].message.content;
}

// Funci√≥n para actualizar el archivo categories.json
async function updateCategoriesJson(article) {
  const categoriesPath = '../content/categories/categories.json';
  
  // Leer el archivo de categor√≠as existente
  const categoriesData = fs.readFileSync(categoriesPath, 'utf8');
  const categories = JSON.parse(categoriesData);
  
  // Verificar si la categor√≠a existe, sino, crearla
  if (!categories[article.category]) {
    categories[article.category] = [];
    console.log(`‚ú® Nueva categor√≠a creada: ${article.category}`);
  }
  
  // Verificar si el art√≠culo ya existe en la categor√≠a
  const existingArticleIndex = categories[article.category].findIndex(item => item.title === article.title);
  
  if (existingArticleIndex === -1) {
    // Si no existe, a√±adir a la categor√≠a correspondiente
    categories[article.category].push({
      title: article.title,
      slug: article.slug,
      image: article.image
    });
    
    // Guardar el archivo actualizado
    fs.writeFileSync(categoriesPath, JSON.stringify(categories, null, 2));
    console.log(`‚úÖ Art√≠culo a√±adido a la categor√≠a ${article.category} en ${categoriesPath}`);
  } else {
    console.log(`‚ÑπÔ∏è El art√≠culo ya existe en la categor√≠a ${article.category}`);
  }
}

// Funci√≥n para extraer metadatos del contenido MDX generado
function extractMetadataFromMDX(mdxContent) {
  const frontMatterRegex = /---\n([\s\S]*?)\n---/;
  const match = mdxContent.match(frontMatterRegex);
  
  if (!match || !match[1]) {
    throw new Error('No se pudo extraer el frontmatter del MDX generado');
  }
  
  const frontMatter = match[1];
  
  // Extraer cada campo del frontmatter
  const titleMatch = frontMatter.match(/title: "([^"]+)"/); 
  const slugMatch = frontMatter.match(/slug: "([^"]+)"/); 
  const imageMatch = frontMatter.match(/image: "([^"]+)"/); 
  const categoryMatch = frontMatter.match(/category: "([^"]+)"/); 
  
  if (!titleMatch || !slugMatch || !imageMatch || !categoryMatch) {
    throw new Error('Falta informaci√≥n requerida en el frontmatter');
  }
  
  return {
    title: titleMatch[1],
    slug: slugMatch[1],
    image: imageMatch[1],
    category: categoryMatch[1]
  };
}

// Rutas de directorios
const OUTPUT_DIR = '../content/posts';
const URLS_DIR = './urls';
const PROCESSED_URLS_FILE = './urls/processed-urls.json';

// Crear directorios si no existen
if (!fs.existsSync(OUTPUT_DIR)) fs.mkdirSync(OUTPUT_DIR, { recursive: true });
if (!fs.existsSync(URLS_DIR)) fs.mkdirSync(URLS_DIR, { recursive: true });

// Cargar URLs ya procesadas
let processedUrls = [];
if (fs.existsSync(PROCESSED_URLS_FILE)) {
  try {
    processedUrls = JSON.parse(fs.readFileSync(PROCESSED_URLS_FILE, 'utf8'));
    console.log(`üìã Cargadas ${processedUrls.length} URLs ya procesadas anteriormente`);
  } catch (error) {
    console.error('‚ö†Ô∏è Error al cargar URLs procesadas:', error.message);
  }
}

// Funci√≥n para cargar todas las URLs desde los archivos en el directorio 'urls'
async function loadUrlsFromFiles() {
  const urlFiles = fs.readdirSync(URLS_DIR)
    .filter(file => file.endsWith('.json') && file !== 'processed-urls.json');
  
  if (urlFiles.length === 0) {
    console.log('‚ö†Ô∏è No se encontraron archivos de URLs en', URLS_DIR);
    return [];
  }
  
  let allUrls = [];
  
  for (const file of urlFiles) {
    const filePath = path.join(URLS_DIR, file);
    try {
      const fileUrls = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      console.log(`üìÑ Cargadas ${fileUrls.length} URLs desde ${file}`);
      allUrls = [...allUrls, ...fileUrls];
    } catch (error) {
      console.error(`‚ö†Ô∏è Error al cargar ${file}:`, error.message);
    }
  }
  
  return allUrls;
}

// MAIN
async function main() {
  // Cargar URLs desde archivos
  const allUrls = await loadUrlsFromFiles();
  console.log(`üî¢ Total de URLs encontradas: ${allUrls.length}`);
  
  // Filtrar URLs ya procesadas
  const urlsToProcess = allUrls.filter(url => !processedUrls.includes(url));
  console.log(`üÜï URLs nuevas a procesar: ${urlsToProcess.length}`);
  
  if (urlsToProcess.length === 0) {
    console.log('‚úÖ No hay nuevas URLs para procesar');
    return;
  }
  
  // Procesar cada URL
  for (const url of urlsToProcess) {
    try {
      console.log(`üîç Procesando ${url}...`);
      const data = await fetchCleanContent(url);

      if (!data.content || data.content.length < 100) {
        console.error(`‚ùå Contenido insuficiente para: ${url}`);
        continue;
      }

      const mdx = await generateMDX(data);
      const slug = slugify(data.title, { lower: true, strict: true });
      const outputPath = `${OUTPUT_DIR}/${slug}.mdx`;
      fs.writeFileSync(outputPath, mdx);
      console.log(`‚úÖ Guardado en: ${outputPath}`);
      
      // Extraer metadatos y actualizar categories.json
      try {
        const metadata = extractMetadataFromMDX(mdx);
        await updateCategoriesJson(metadata);
      } catch (metadataError) {
        console.error(`‚ùå Error al actualizar categories.json:`, metadataError.message);
      }
      
      // A√±adir URL a la lista de procesadas
      processedUrls.push(url);
      
      // Guardar la lista actualizada despu√©s de cada art√≠culo
      fs.writeFileSync(PROCESSED_URLS_FILE, JSON.stringify(processedUrls, null, 2));
      
      // A√±adir un peque√±o retraso entre peticiones para no sobrecargar el servidor
      await new Promise(resolve => setTimeout(resolve, 2000));
    } catch (error) {
      console.error(`‚ùå Error al procesar ${url}:`, error.message);
    }
  }
}

// Ejecutar la funci√≥n principal
main().catch(error => {
  console.error('‚ùå Error general:', error.message);
  process.exit(1);
});
